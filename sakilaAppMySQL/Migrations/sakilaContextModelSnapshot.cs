// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sakilaAppMySQL.Infrastructure.Context;

#nullable disable

namespace sakilaAppMySQL.Migrations
{
    [DbContext(typeof(sakilaContext))]
    partial class sakilaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Actor", b =>
                {
                    b.Property<ushort>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("actor_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ActorId");

                    b.HasIndex(new[] { "LastName" }, "idx_actor_last_name");

                    b.ToTable("actor", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.ActorInfo", b =>
                {
                    b.Property<ushort>("ActorId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("actor_id");

                    b.Property<string>("FilmInfo")
                        .HasColumnType("text")
                        .HasColumnName("film_info");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.ToView("actor_info");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Address", b =>
                {
                    b.Property<ushort>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("address_id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address2");

                    b.Property<ushort>("CityId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("city_id");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("district");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postal_code");

                    b.HasKey("AddressId");

                    b.HasIndex(new[] { "CityId" }, "idx_fk_city_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.City", b =>
                {
                    b.Property<ushort>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("city_id");

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<ushort>("CountryId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CityId");

                    b.HasIndex(new[] { "CountryId" }, "idx_fk_country_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Country", b =>
                {
                    b.Property<ushort>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("country_id");

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CountryId");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Customer", b =>
                {
                    b.Property<ushort>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("AddressId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte>("StoreId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("store_id");

                    b.HasKey("CustomerId");

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_address_id");

                    b.HasIndex(new[] { "StoreId" }, "idx_fk_store_id");

                    b.HasIndex(new[] { "LastName" }, "idx_last_name");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.CustomerList", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<ushort>("Id")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(91)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("notes")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<byte>("Sid")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("SID");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip code");

                    b.ToView("customer_list");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Film", b =>
                {
                    b.Property<ushort>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("film_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ushort?>("Length")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("length");

                    b.Property<byte?>("OriginalLanguageId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("original_language_id");

                    b.Property<string>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('G','PG','PG-13','R','NC-17')")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("'G'");

                    b.Property<short?>("ReleaseYear")
                        .HasColumnType("year")
                        .HasColumnName("release_year");

                    b.Property<byte>("RentalDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("rental_duration")
                        .HasDefaultValueSql("'3'");

                    b.Property<decimal>("RentalRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("rental_rate")
                        .HasDefaultValueSql("'4.99'");

                    b.Property<decimal>("ReplacementCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("replacement_cost")
                        .HasDefaultValueSql("'19.99'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.HasKey("FilmId");

                    b.HasIndex(new[] { "LanguageId" }, "idx_fk_language_id");

                    b.HasIndex(new[] { "OriginalLanguageId" }, "idx_fk_original_language_id");

                    b.HasIndex(new[] { "Title" }, "idx_title");

                    b.ToTable("film", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.FilmActor", b =>
                {
                    b.Property<ushort>("ActorId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("actor_id");

                    b.Property<ushort>("FilmId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ActorId", "FilmId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FilmId" }, "idx_fk_film_id");

                    b.ToTable("film_actor", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.FilmCategory", b =>
                {
                    b.Property<ushort>("FilmId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("film_id");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FilmId", "CategoryId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CategoryId" }, "fk_film_category_category");

                    b.ToTable("film_category", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.FilmList", b =>
                {
                    b.Property<string>("Actors")
                        .HasColumnType("text")
                        .HasColumnName("actors");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<ushort?>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("FID")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort?>("Length")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("length");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("'4.99'");

                    b.Property<string>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('G','PG','PG-13','R','NC-17')")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("'G'");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.ToView("film_list");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.FilmText", b =>
                {
                    b.Property<short>("FilmId")
                        .HasColumnType("smallint")
                        .HasColumnName("film_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("FilmId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Title", "Description" }, "idx_title_description")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.ToTable("film_text", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Inventory", b =>
                {
                    b.Property<uint>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint unsigned")
                        .HasColumnName("inventory_id");

                    b.Property<ushort>("FilmId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte>("StoreId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("store_id");

                    b.HasKey("InventoryId");

                    b.HasIndex(new[] { "FilmId" }, "idx_fk_film_id")
                        .HasDatabaseName("idx_fk_film_id1");

                    b.HasIndex(new[] { "StoreId", "FilmId" }, "idx_store_id_film_id");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Language", b =>
                {
                    b.Property<byte>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("char(20)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.HasKey("LanguageId");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.NicerButSlowerFilmList", b =>
                {
                    b.Property<string>("Actors")
                        .HasColumnType("text")
                        .HasColumnName("actors");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<ushort?>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("FID")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort?>("Length")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("length");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("'4.99'");

                    b.Property<string>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('G','PG','PG-13','R','NC-17')")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("'G'");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.ToView("nicer_but_slower_film_list");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Payment", b =>
                {
                    b.Property<ushort>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("amount");

                    b.Property<ushort>("CustomerId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int")
                        .HasColumnName("rental_id");

                    b.Property<byte>("StaffId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("staff_id");

                    b.HasKey("PaymentId");

                    b.HasIndex(new[] { "RentalId" }, "fk_payment_rental");

                    b.HasIndex(new[] { "CustomerId" }, "idx_fk_customer_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_fk_staff_id");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rental_id");

                    b.Property<ushort>("CustomerId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("customer_id");

                    b.Property<uint>("InventoryId")
                        .HasColumnType("mediumint unsigned")
                        .HasColumnName("inventory_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("rental_date");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("return_date");

                    b.Property<byte>("StaffId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("staff_id");

                    b.HasKey("RentalId");

                    b.HasIndex(new[] { "CustomerId" }, "idx_fk_customer_id")
                        .HasDatabaseName("idx_fk_customer_id1");

                    b.HasIndex(new[] { "InventoryId" }, "idx_fk_inventory_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_fk_staff_id")
                        .HasDatabaseName("idx_fk_staff_id1");

                    b.HasIndex(new[] { "RentalDate", "InventoryId", "CustomerId" }, "rental_date")
                        .IsUnique();

                    b.ToTable("rental", (string)null);
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.SalesByFilmCategory", b =>
                {
                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("category");

                    b.Property<decimal?>("TotalSales")
                        .HasPrecision(27, 2)
                        .HasColumnType("decimal(27,2)")
                        .HasColumnName("total_sales");

                    b.ToView("sales_by_film_category");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.SalesByStore", b =>
                {
                    b.Property<string>("Manager")
                        .HasMaxLength(91)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("manager");

                    b.Property<string>("Store")
                        .HasMaxLength(101)
                        .HasColumnType("varchar(101)")
                        .HasColumnName("store");

                    b.Property<decimal?>("TotalSales")
                        .HasPrecision(27, 2)
                        .HasColumnType("decimal(27,2)")
                        .HasColumnName("total_sales");

                    b.ToView("sales_by_store");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.staff", b =>
                {
                    b.Property<byte>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("staff_id");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("AddressId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Password")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("password")
                        .UseCollation("utf8mb4_bin");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("blob")
                        .HasColumnName("picture");

                    b.Property<byte>("StoreId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("store_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("username");

                    b.HasKey("StaffId");

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_address_id")
                        .HasDatabaseName("idx_fk_address_id2");

                    b.HasIndex(new[] { "StoreId" }, "idx_fk_store_id")
                        .HasDatabaseName("idx_fk_store_id1");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.StaffList", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(91)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<byte>("Sid")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("SID");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip code");

                    b.ToView("staff_list");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", b =>
                {
                    b.Property<byte>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("store_id");

                    b.Property<ushort>("AddressId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte>("ManagerStaffId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("manager_staff_id");

                    b.HasKey("StoreId");

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_address_id")
                        .HasDatabaseName("idx_fk_address_id1");

                    b.HasIndex(new[] { "ManagerStaffId" }, "idx_unique_manager")
                        .IsUnique();

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Address", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("fk_address_city");

                    b.Navigation("City");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.City", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("fk_city_country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Customer", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_customer_address");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", "Store")
                        .WithMany("Customers")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("fk_customer_store");

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Film", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Language", "Language")
                        .WithMany("FilmLanguages")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("fk_film_language");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Language", "OriginalLanguage")
                        .WithMany("FilmOriginalLanguages")
                        .HasForeignKey("OriginalLanguageId")
                        .HasConstraintName("fk_film_language_original");

                    b.Navigation("Language");

                    b.Navigation("OriginalLanguage");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.FilmActor", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Actor", "Actor")
                        .WithMany("FilmActors")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("fk_film_actor_actor");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Film", "Film")
                        .WithMany("FilmActors")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("fk_film_actor_film");

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.FilmCategory", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Category", "Category")
                        .WithMany("FilmCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_film_category_category");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Film", "Film")
                        .WithMany("FilmCategories")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("fk_film_category_film");

                    b.Navigation("Category");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Film", "Film")
                        .WithMany("Inventories")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("fk_inventory_film");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("fk_inventory_store");

                    b.Navigation("Film");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Payment", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_payment_customer");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Rental", "Rental")
                        .WithMany("Payments")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_payment_rental");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.staff", "Staff")
                        .WithMany("Payments")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_payment_staff");

                    b.Navigation("Customer");

                    b.Navigation("Rental");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Rental", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_customer");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Inventory", "Inventory")
                        .WithMany("Rentals")
                        .HasForeignKey("InventoryId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_inventory");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.staff", "Staff")
                        .WithMany("Rentals")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_staff");

                    b.Navigation("Customer");

                    b.Navigation("Inventory");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.staff", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Address", "Address")
                        .WithMany("staff")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_address");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", "StoreNavigation")
                        .WithMany("staff")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_store");

                    b.Navigation("Address");

                    b.Navigation("StoreNavigation");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", b =>
                {
                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_store_address");

                    b.HasOne("sakilaAppMySQL.Infrastructure.Domain.Entities.staff", "ManagerStaff")
                        .WithOne("Store")
                        .HasForeignKey("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", "ManagerStaffId")
                        .IsRequired()
                        .HasConstraintName("fk_store_staff");

                    b.Navigation("Address");

                    b.Navigation("ManagerStaff");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Actor", b =>
                {
                    b.Navigation("FilmActors");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Stores");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Category", b =>
                {
                    b.Navigation("FilmCategories");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Film", b =>
                {
                    b.Navigation("FilmActors");

                    b.Navigation("FilmCategories");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Language", b =>
                {
                    b.Navigation("FilmLanguages");

                    b.Navigation("FilmOriginalLanguages");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Rental", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.staff", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("sakilaAppMySQL.Infrastructure.Domain.Entities.Store", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Inventories");

                    b.Navigation("staff");
                });
#pragma warning restore 612, 618
        }
    }
}
